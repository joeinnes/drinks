import { jsx as _jsx } from "react/jsx-runtime";
import { JazzBrowserContextManager, } from "jazz-browser";
import { JazzContext, JazzContextManagerContext } from "jazz-react-core";
import React, { useEffect, useRef } from "react";
/** @category Context & Hooks */
export function JazzProvider({ children, guestMode, sync, storage, AccountSchema, defaultProfileName, onLogOut, logOutReplacement, onAnonymousAccountDiscarded, }) {
    const [contextManager] = React.useState(() => new JazzBrowserContextManager());
    const onLogOutRefCallback = useRefCallback(onLogOut);
    const logOutReplacementRefCallback = useRefCallback(logOutReplacement);
    const onAnonymousAccountDiscardedRefCallback = useRefCallback(onAnonymousAccountDiscarded);
    const logoutReplacementActiveRef = useRef(false);
    logoutReplacementActiveRef.current = Boolean(logOutReplacement);
    const value = React.useSyncExternalStore(React.useCallback((callback) => {
        const props = {
            AccountSchema,
            guestMode,
            sync,
            storage,
            defaultProfileName,
            onLogOut: onLogOutRefCallback,
            logOutReplacement: logoutReplacementActiveRef.current
                ? logOutReplacementRefCallback
                : undefined,
            onAnonymousAccountDiscarded: onAnonymousAccountDiscardedRefCallback,
        };
        if (contextManager.propsChanged(props)) {
            contextManager.createContext(props).catch((error) => {
                console.error("Error creating Jazz browser context:", error);
            });
        }
        return contextManager.subscribe(callback);
    }, [sync, guestMode].concat(storage)), () => contextManager.getCurrentValue(), () => contextManager.getCurrentValue());
    useEffect(() => {
        // In development mode we don't return a cleanup function because otherwise
        // the double effect execution would mark the context as done immediately.
        if (process.env.NODE_ENV === "development")
            return;
        return () => {
            contextManager.done();
        };
    }, []);
    return (_jsx(JazzContext.Provider, { value: value, children: _jsx(JazzContextManagerContext.Provider, { value: contextManager, children: value && children }) }));
}
function useRefCallback(callback) {
    const callbackRef = React.useRef(callback);
    callbackRef.current = callback;
    return useRef((...args) => callbackRef.current?.(...args)).current;
}
//# sourceMappingURL=provider.js.map