import type { CojsonInternalTypes, RawCoID, SessionID } from "cojson";
import type { DBClientInterface, SessionRow, SignatureAfterRow, StoredCoValueRow, StoredSessionRow, TransactionRow } from "cojson-storage";
import { CoJsonIDBTransaction } from "./CoJsonIDBTransaction.js";
export declare class IDBClient implements DBClientInterface {
    private db;
    activeTransaction: CoJsonIDBTransaction | undefined;
    autoBatchingTransaction: CoJsonIDBTransaction | undefined;
    constructor(db: IDBDatabase);
    makeRequest<T>(handler: (txEntry: CoJsonIDBTransaction) => IDBRequest<T>): Promise<T>;
    getCoValue(coValueId: RawCoID): Promise<StoredCoValueRow | undefined>;
    getCoValueSessions(coValueRowId: number): Promise<StoredSessionRow[]>;
    getSingleCoValueSession(coValueRowId: number, sessionID: SessionID): Promise<StoredSessionRow | undefined>;
    getNewTransactionInSession(sessionRowId: number, firstNewTxIdx: number): Promise<TransactionRow[]>;
    getSignatures(sessionRowId: number, firstNewTxIdx: number): Promise<SignatureAfterRow[]>;
    addCoValue(msg: CojsonInternalTypes.NewContentMessage): Promise<number>;
    addSessionUpdate({ sessionUpdate, sessionRow, }: {
        sessionUpdate: SessionRow;
        sessionRow?: StoredSessionRow;
    }): Promise<number>;
    addTransaction(sessionRowID: number, idx: number, newTransaction: CojsonInternalTypes.Transaction): Promise<void>;
    addSignatureAfter({ sessionRowID, idx, signature, }: {
        sessionRowID: number;
        idx: number;
        signature: CojsonInternalTypes.Signature;
    }): Promise<IDBValidKey>;
    closeTransaction(tx: CoJsonIDBTransaction): void;
    transaction(operationsCallback: () => unknown): Promise<void>;
}
//# sourceMappingURL=idbClient.d.ts.map