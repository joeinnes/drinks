import { CojsonInternalTypes, type OutgoingSyncQueue, type SyncMessage } from "cojson";
import type { DBClientInterface, StoredSessionRow } from "./types.js";
export declare class SyncManager {
    private readonly toLocalNode;
    private readonly dbClient;
    constructor(dbClient: DBClientInterface, toLocalNode: OutgoingSyncQueue);
    handleSyncMessage(msg: SyncMessage): Promise<void>;
    handleSessionUpdate({ sessionRow, peerKnownState, newContentMessages, }: {
        sessionRow: StoredSessionRow;
        peerKnownState: CojsonInternalTypes.CoValueKnownState;
        newContentMessages: CojsonInternalTypes.NewContentMessage[];
    }): Promise<void>;
    sendNewContent(coValueKnownState: CojsonInternalTypes.CoValueKnownState): Promise<void>;
    private collectCoValueData;
    handleLoad(msg: CojsonInternalTypes.LoadMessage): Promise<void>;
    handleContent(msg: CojsonInternalTypes.NewContentMessage): Promise<unknown>;
    private putNewTxs;
    handleKnown(_msg: CojsonInternalTypes.KnownStateMessage): void;
    handleDone(_msg: CojsonInternalTypes.DoneMessage): void;
    sendStateMessage(msg: CojsonInternalTypes.KnownStateMessage | CojsonInternalTypes.NewContentMessage): Promise<unknown>;
}
//# sourceMappingURL=syncManager.d.ts.map