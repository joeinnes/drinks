export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["NONE"] = 4] = "NONE";
})(LogLevel || (LogLevel = {}));
// Default console-based logging system
export class ConsoleLogSystem {
    debug(message, attributes) {
        console.debug(message, attributes);
    }
    info(message, attributes) {
        console.info(message, attributes);
    }
    warn(message, attributes) {
        console.warn(message, attributes);
    }
    error(message, attributes) {
        console.error(message, attributes);
    }
}
export class Logger {
    constructor(level = LogLevel.INFO, logSystem = new ConsoleLogSystem()) {
        this.level = level;
        this.logSystem = logSystem;
    }
    setLevel(level) {
        this.level = level;
    }
    setLogSystem(logSystem) {
        this.logSystem = logSystem;
    }
    debug(message, attributes) {
        if (this.level <= LogLevel.DEBUG) {
            this.logSystem.debug(message, attributes);
        }
    }
    info(message, attributes) {
        if (this.level <= LogLevel.INFO) {
            this.logSystem.info(message, attributes);
        }
    }
    warn(message, attributes) {
        if (this.level <= LogLevel.WARN) {
            this.logSystem.warn(message, attributes);
        }
    }
    error(message, attributes) {
        if (this.level <= LogLevel.ERROR) {
            this.logSystem.error(message, attributes);
        }
    }
}
// Create default logger instance
export const logger = new Logger();
//# sourceMappingURL=logger.js.map