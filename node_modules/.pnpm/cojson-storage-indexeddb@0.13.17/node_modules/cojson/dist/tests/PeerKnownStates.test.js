import { describe, expect, test, vi } from "vitest";
import { PeerKnownStates } from "../PeerKnownStates.js";
import { emptyKnownState } from "../sync.js";
describe("PeerKnownStates", () => {
    test("should set and get a known state", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const knownState = emptyKnownState(id);
        peerKnownStates.set(id, knownState);
        expect(peerKnownStates.get(id)).toEqual(knownState);
        expect(peerKnownStates.has(id)).toBe(true);
    });
    test("should update header", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        peerKnownStates.updateHeader(id, true);
        const result = peerKnownStates.get(id);
        expect(result?.header).toBe(true);
    });
    test("should update session counter", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const sessionId = "session-1";
        peerKnownStates.updateSessionCounter(id, sessionId, 5);
        const result = peerKnownStates.get(id);
        expect(result?.sessions[sessionId]).toBe(5);
    });
    test("should combine with existing state", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const session1 = "session-1";
        const session2 = "session-2";
        const initialState = {
            ...emptyKnownState(id),
            sessions: { [session1]: 5 },
        };
        const combineState = {
            ...emptyKnownState(id),
            sessions: { [session2]: 10 },
        };
        peerKnownStates.set(id, initialState);
        peerKnownStates.combineWith(id, combineState);
        const result = peerKnownStates.get(id);
        expect(result?.sessions).toEqual({ [session1]: 5, [session2]: 10 });
    });
    test("should set as empty", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const sessionId = "session-1";
        const initialState = {
            ...emptyKnownState(id),
            sessions: { [sessionId]: 5 },
        };
        peerKnownStates.set(id, initialState);
        peerKnownStates.set(id, "empty");
        const result = peerKnownStates.get(id);
        expect(result).toEqual(emptyKnownState(id));
    });
    test("should trigger listeners on dispatch", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const listener = vi.fn();
        peerKnownStates.subscribe(listener);
        peerKnownStates.set(id, "empty");
        expect(listener).toHaveBeenCalledWith(id, emptyKnownState(id));
    });
    test("should unsubscribe listener", () => {
        const peerKnownStates = new PeerKnownStates();
        const id = "test-id";
        const listener = vi.fn();
        const unsubscribe = peerKnownStates.subscribe(listener);
        unsubscribe();
        peerKnownStates.set(id, "empty");
        expect(listener).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=PeerKnownStates.test.js.map