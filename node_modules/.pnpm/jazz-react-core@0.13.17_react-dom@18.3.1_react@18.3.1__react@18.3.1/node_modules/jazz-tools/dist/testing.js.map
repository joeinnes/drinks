{"version":3,"sources":["../src/testing.ts"],"sourcesContent":["import { AgentSecret, CryptoProvider, LocalNode, Peer } from \"cojson\";\nimport { cojsonInternals } from \"cojson\";\nimport { PureJSCrypto } from \"cojson/dist/crypto/PureJSCrypto\";\nimport {\n  Account,\n  AccountClass,\n  AuthCredentials,\n  JazzContextManagerAuthProps,\n} from \"./exports.js\";\nimport {\n  JazzContextManager,\n  JazzContextManagerBaseProps,\n} from \"./implementation/ContextManager.js\";\nimport { activeAccountContext } from \"./implementation/activeAccountContext.js\";\nimport {\n  type AnonymousJazzAgent,\n  type CoValueClass,\n  createAnonymousJazzContext,\n  createJazzContext,\n  randomSessionProvider,\n} from \"./internal.js\";\n\nconst syncServer: { current: LocalNode | null } = { current: null };\n\ntype TestAccountSchema<Acc extends Account> = CoValueClass<Acc> & {\n  fromNode: (typeof Account)[\"fromNode\"];\n  create: (options: {\n    creationProps: { name: string };\n    initialAgentSecret?: AgentSecret;\n    peersToLoadFrom?: Peer[];\n    crypto: CryptoProvider;\n  }) => Promise<Acc>;\n};\n\nexport class TestJSCrypto extends PureJSCrypto {\n  static async create() {\n    if (\"navigator\" in globalThis && navigator.userAgent?.includes(\"jsdom\")) {\n      // Mocking crypto seal & encrypt to make it work with JSDom. Getting \"Error: Uint8Array expected\" there\n      const crypto = new PureJSCrypto();\n\n      crypto.seal = (options) =>\n        `sealed_U${cojsonInternals.stableStringify(options.message)}` as any;\n      crypto.unseal = (sealed) =>\n        JSON.parse(sealed.substring(\"sealed_U\".length));\n      crypto.encrypt = (message) =>\n        `encrypted_U${cojsonInternals.stableStringify(message)}` as any;\n      crypto.decryptRaw = (encrypted) =>\n        encrypted.substring(\"encrypted_U\".length) as any;\n\n      return crypto;\n    }\n\n    // For non-jsdom environments, we use the real crypto\n    return new PureJSCrypto();\n  }\n}\n\nexport function getPeerConnectedToTestSyncServer() {\n  if (!syncServer.current) {\n    throw new Error(\"Sync server not initialized\");\n  }\n\n  const [aPeer, bPeer] = cojsonInternals.connectedPeers(\n    Math.random().toString(),\n    Math.random().toString(),\n    {\n      peer1role: \"server\",\n      peer2role: \"server\",\n    },\n  );\n  syncServer.current.syncManager.addPeer(aPeer);\n\n  return bPeer;\n}\n\nconst SecretSeedMap = new Map<string, Uint8Array>();\nlet isMigrationActive = false;\n\nexport async function createJazzTestAccount<Acc extends Account>(options?: {\n  isCurrentActiveAccount?: boolean;\n  AccountSchema?: CoValueClass<Acc>;\n  creationProps?: Record<string, unknown>;\n}): Promise<Acc> {\n  const AccountSchema = (options?.AccountSchema ??\n    Account) as unknown as TestAccountSchema<Acc>;\n  const peers = [];\n  if (syncServer.current) {\n    peers.push(getPeerConnectedToTestSyncServer());\n  }\n\n  const crypto = await TestJSCrypto.create();\n  const secretSeed = crypto.newRandomSecretSeed();\n\n  const { node } = await LocalNode.withNewlyCreatedAccount({\n    creationProps: {\n      name: \"Test Account\",\n      ...options?.creationProps,\n    },\n    initialAgentSecret: crypto.agentSecretFromSecretSeed(secretSeed),\n    crypto,\n    peersToLoadFrom: peers,\n    migration: async (rawAccount, _node, creationProps) => {\n      if (isMigrationActive) {\n        throw new Error(\n          \"It is not possible to create multiple accounts in parallel inside the test environment.\",\n        );\n      }\n\n      isMigrationActive = true;\n\n      const account = new AccountSchema({\n        fromRaw: rawAccount,\n      });\n\n      // We need to set the account as current because the migration\n      // will probably rely on the global me\n      const prevActiveAccount = activeAccountContext.maybeGet();\n      activeAccountContext.set(account);\n\n      await account.applyMigration?.(creationProps);\n\n      if (!options?.isCurrentActiveAccount) {\n        activeAccountContext.set(prevActiveAccount);\n      }\n\n      isMigrationActive = false;\n    },\n  });\n\n  const account = AccountSchema.fromNode(node);\n  SecretSeedMap.set(account.id, secretSeed);\n\n  if (options?.isCurrentActiveAccount) {\n    activeAccountContext.set(account);\n  }\n\n  return account;\n}\n\nexport function setActiveAccount(account: Account) {\n  activeAccountContext.set(account);\n}\n\nexport async function createJazzTestGuest() {\n  const ctx = await createAnonymousJazzContext({\n    crypto: await PureJSCrypto.create(),\n    peersToLoadFrom: [],\n  });\n\n  return {\n    guest: ctx.agent,\n  };\n}\n\nexport type TestJazzContextManagerProps<Acc extends Account> =\n  JazzContextManagerBaseProps<Acc> & {\n    defaultProfileName?: string;\n    AccountSchema?: AccountClass<Acc>;\n    isAuthenticated?: boolean;\n  };\n\nexport class TestJazzContextManager<\n  Acc extends Account,\n> extends JazzContextManager<Acc, TestJazzContextManagerProps<Acc>> {\n  static fromAccountOrGuest<Acc extends Account>(\n    account?: Acc | { guest: AnonymousJazzAgent },\n    props?: TestJazzContextManagerProps<Acc>,\n  ) {\n    if (account && \"guest\" in account) {\n      return this.fromGuest<Acc>(account, props);\n    }\n\n    return this.fromAccount<Acc>(account ?? (Account.getMe() as Acc), props);\n  }\n\n  static fromAccount<Acc extends Account>(\n    account: Acc,\n    props?: TestJazzContextManagerProps<Acc>,\n  ) {\n    const context = new TestJazzContextManager<Acc>();\n\n    const provider = props?.isAuthenticated ? \"testProvider\" : \"anonymous\";\n    const storage = context.getAuthSecretStorage();\n    const node = account._raw.core.node;\n\n    const credentials = {\n      accountID: account.id,\n      accountSecret: node.account.agentSecret,\n      secretSeed: SecretSeedMap.get(account.id),\n      provider,\n    } satisfies AuthCredentials;\n\n    storage.set(credentials);\n\n    context.updateContext(\n      {\n        AccountSchema: account.constructor as AccountClass<Acc>,\n        ...props,\n      },\n      {\n        me: account,\n        node,\n        done: () => {\n          node.gracefulShutdown();\n        },\n        logOut: async () => {\n          await storage.clear();\n          node.gracefulShutdown();\n        },\n      },\n      {\n        credentials,\n      },\n    );\n\n    return context;\n  }\n\n  static fromGuest<Acc extends Account>(\n    { guest }: { guest: AnonymousJazzAgent },\n    props: TestJazzContextManagerProps<Acc> = {},\n  ) {\n    const context = new TestJazzContextManager<Acc>();\n    const node = guest.node;\n\n    context.updateContext(props, {\n      guest,\n      node,\n      done: () => {\n        node.gracefulShutdown();\n      },\n      logOut: async () => {\n        node.gracefulShutdown();\n      },\n    });\n\n    return context;\n  }\n\n  async getNewContext(\n    props: TestJazzContextManagerProps<Acc>,\n    authProps?: JazzContextManagerAuthProps,\n  ) {\n    if (!syncServer.current) {\n      throw new Error(\n        \"You need to setup a test sync server with setupJazzTestSync to use the Auth functions\",\n      );\n    }\n\n    const context = await createJazzContext<Acc>({\n      credentials: authProps?.credentials,\n      defaultProfileName: props.defaultProfileName,\n      newAccountProps: authProps?.newAccountProps,\n      peersToLoadFrom: [getPeerConnectedToTestSyncServer()],\n      crypto: await TestJSCrypto.create(),\n      sessionProvider: randomSessionProvider,\n      authSecretStorage: this.getAuthSecretStorage(),\n      AccountSchema: props.AccountSchema,\n    });\n\n    return {\n      me: context.account,\n      node: context.node,\n      done: () => {\n        context.done();\n      },\n      logOut: () => {\n        return context.logOut();\n      },\n    };\n  }\n}\n\nexport async function linkAccounts(\n  a: Account,\n  b: Account,\n  aRole: \"server\" | \"client\" = \"server\",\n  bRole: \"server\" | \"client\" = \"server\",\n) {\n  const [aPeer, bPeer] = cojsonInternals.connectedPeers(b.id, a.id, {\n    peer1role: aRole,\n    peer2role: bRole,\n  });\n\n  a._raw.core.node.syncManager.addPeer(aPeer);\n  b._raw.core.node.syncManager.addPeer(bPeer);\n\n  await a.waitForAllCoValuesSync();\n  await b.waitForAllCoValuesSync();\n}\n\nexport async function setupJazzTestSync() {\n  if (syncServer.current) {\n    syncServer.current.gracefulShutdown();\n  }\n\n  const account = await Account.create({\n    creationProps: {\n      name: \"Test Account\",\n    },\n    crypto: await TestJSCrypto.create(),\n  });\n\n  syncServer.current = account._raw.core.node;\n\n  return account;\n}\n"],"mappings":"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","names":["account"]}