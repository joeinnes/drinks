import { CoID } from "cojson";
import { CoValueClass, co } from "../internal.js";
import { CoMap, CoMapInit, Simplify } from "./coMap.js";
import { Group } from "./group.js";
import { InboxRoot } from "./inbox.js";
/** @category Identity & Permissions */
export declare class Profile extends CoMap {
    name: co<string>;
    inbox: co<CoID<InboxRoot> | undefined>;
    inboxInvite: co<`${CoID<import("cojson").RawCoStream<CoID<import("cojson").RawCoMap<{
        payload: import("./interfaces.js").ID<import("./interfaces.js").CoValue>;
        result: import("./interfaces.js").ID<any> | undefined;
        processed: boolean;
        error: string | undefined;
    }, import("cojson").JsonObject | null>>, import("cojson").JsonObject | null>>}/inviteSecret_z${string}` | undefined>;
    get _owner(): Group;
    /**
     * Creates a new profile with the given initial values and owner.
     *
     * The owner (a Group) determines access rights to the Profile.
     *
     * @category Creation
     */
    static create<M extends CoMap>(this: CoValueClass<M>, init: Simplify<CoMapInit<M>>, options?: {
        owner: Group;
    } | Group): M;
}
//# sourceMappingURL=profile.d.ts.map