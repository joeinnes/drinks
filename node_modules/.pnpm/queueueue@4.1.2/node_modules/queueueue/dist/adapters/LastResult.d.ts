/// <reference types="node" />
import { PushAdapter } from '../common';
export default class LastResult<A> implements PushAdapter<A> {
    private buffer;
    private closed;
    private resolved;
    private requested;
    static fromDom: (type: keyof GlobalEventHandlersEventMap, target: import("../fromDom").Target<keyof GlobalEventHandlersEventMap, import("../fromDom").Listener<keyof GlobalEventHandlersEventMap>, boolean | AddEventListenerOptions>, options?: boolean | AddEventListenerOptions | undefined) => AsyncIterableIterator<UIEvent | Event | AnimationEvent | MouseEvent | InputEvent | FocusEvent | CompositionEvent | DragEvent | ErrorEvent | FormDataEvent | PointerEvent | KeyboardEvent | ProgressEvent<EventTarget> | SecurityPolicyViolationEvent | SubmitEvent | TouchEvent | TransitionEvent | WheelEvent>;
    static fromEmitter: (type: string | symbol, emitter: NodeJS.EventEmitter) => AsyncIterableIterator<any>;
    push(value: A, done?: boolean): Promise<IteratorResult<A>>;
    next(): Promise<IteratorResult<A>>;
    return(value?: A): Promise<IteratorResult<A>>;
    wrap(onReturn?: () => void): {
        next: () => Promise<IteratorResult<A, any>>;
        [Symbol.asyncIterator](): any;
        return: (value?: A) => Promise<IteratorResult<A, any>>;
    };
    [Symbol.asyncIterator](): this;
}
