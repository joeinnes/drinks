import { CoValueCore } from "../coValueCore.js";
import { JsonObject } from "../jsonValue.js";
import { OpID, RawCoList } from "./coList.js";
export type StringifiedOpID = string & {
    __stringifiedOpID: true;
};
export declare function stringifyOpID(opID: OpID): StringifiedOpID;
type PlaintextIdxMapping = {
    opIDbeforeIdx: OpID[];
    opIDafterIdx: OpID[];
    idxAfterOpID: {
        [opID: StringifiedOpID]: number;
    };
    idxBeforeOpID: {
        [opID: StringifiedOpID]: number;
    };
};
/**
 * A collaborative plain text implementation that supports grapheme-accurate editing.
 *
 * Locale support:
 * - Locale can be specified in the meta field when creating the text: `{ meta: { locale: "ja-JP" } }`
 * - If no locale is specified, falls back to browser's locale (`navigator.language`)
 * - If browser locale is not available, defaults to 'en'
 *
 * @example
 * ```typescript
 * // With specific locale
 * const textJa = node.createCoValue({
 *   type: "coplaintext",
 *   ruleset: { type: "unsafeAllowAll" },
 *   meta: { locale: "ja-JP" },
 *   ...Crypto.createdNowUnique(),
 * });
 *
 * // Using browser locale
 * const text = node.createCoValue({
 *   type: "coplaintext",
 *   ruleset: { type: "unsafeAllowAll" },
 *   meta: null,
 *   ...Crypto.createdNowUnique(),
 * });
 * ```
 */
export declare class RawCoPlainText<Meta extends JsonObject | null = JsonObject | null> extends RawCoList<string, Meta> {
    /** @category 6. Meta */
    type: "coplaintext";
    private _segmenter;
    _cachedMapping: WeakMap<NonNullable<typeof this._cachedEntries>, PlaintextIdxMapping>;
    constructor(core: CoValueCore);
    get mapping(): PlaintextIdxMapping;
    toString(): string;
    /**
     * Inserts `text` before the character at index `idx`.
     * If idx is 0, inserts at the start of the text.
     *
     * @param idx - The index of the character to insert before
     * @param text - The text to insert
     * @param privacy - Whether the operation should be private or trusting
     * @category 2. Editing
     */
    insertBefore(idx: number, text: string, privacy?: "private" | "trusting"): void;
    /**
     * Inserts `text` after the character at index `idx`.
     *
     * @param idx - The index of the character to insert after
     * @param text - The text to insert
     * @param privacy - Whether the operation should be private or trusting
     * @category 2. Editing
     */
    insertAfter(idx: number, text: string, privacy?: "private" | "trusting"): void;
    deleteRange({ from, to }: {
        from: number;
        to: number;
    }, privacy?: "private" | "trusting"): void;
}
export {};
//# sourceMappingURL=coPlainText.d.ts.map