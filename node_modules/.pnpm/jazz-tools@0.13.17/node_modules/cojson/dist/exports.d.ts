import { base64URLtoBytes, bytesToBase64url } from "./base64url.js";
import { type RawCoValue } from "./coValue.js";
import { CoValueCore, type CoValueUniqueness, MAX_RECOMMENDED_TX_SIZE, idforHeader } from "./coValueCore.js";
import { ControlledAgent, RawAccount, RawControlledAccount, RawProfile, accountHeaderForInitialAgentSecret } from "./coValues/account.js";
import { OpID, RawCoList } from "./coValues/coList.js";
import { RawCoMap } from "./coValues/coMap.js";
import { RawCoPlainText, stringifyOpID } from "./coValues/coPlainText.js";
import { BinaryStreamItem, BinaryStreamStart, CoStreamItem, RawBinaryCoStream, RawCoStream } from "./coValues/coStream.js";
import { EVERYONE, RawGroup } from "./coValues/group.js";
import type { Everyone } from "./coValues/group.js";
import { CryptoProvider, StreamingHash } from "./crypto/crypto.js";
import { getGroupDependentKey, getGroupDependentKeyList, isRawCoID, rawCoIDfromBytes, rawCoIDtoBytes } from "./ids.js";
import { Stringified, parseJSON, stableStringify } from "./jsonStringify.js";
import { LocalNode } from "./localNode.js";
import type { AccountRole, Role } from "./permissions.js";
import { Channel, connectedPeers } from "./streamUtils.js";
import { accountOrAgentIDfromSessionID } from "./typeUtils/accountOrAgentIDfromSessionID.js";
import { expectGroup } from "./typeUtils/expectGroup.js";
import { isAccountID } from "./typeUtils/isAccountID.js";
import type { AnyRawCoValue, CoID } from "./coValue.js";
import type { AccountMeta, RawAccountID, RawAccountMigration } from "./coValues/account.js";
import type { BinaryCoStreamMeta, BinaryStreamInfo } from "./coValues/coStream.js";
import type { InviteSecret } from "./coValues/group.js";
import type { AgentSecret } from "./crypto/crypto.js";
import type { AgentID, RawCoID, SessionID } from "./ids.js";
import type { JsonObject, JsonValue } from "./jsonValue.js";
import type * as Media from "./media.js";
import { disablePermissionErrors } from "./permissions.js";
import type { IncomingSyncStream, OutgoingSyncQueue, Peer, SyncMessage } from "./sync.js";
import { DisconnectedError, PingTimeoutError, emptyKnownState } from "./sync.js";
type Value = JsonValue | AnyRawCoValue;
import { logger } from "./logger.js";
import { getPriorityFromHeader } from "./priority.js";
/** @hidden */
export declare const cojsonInternals: {
    connectedPeers: typeof connectedPeers;
    rawCoIDtoBytes: typeof rawCoIDtoBytes;
    rawCoIDfromBytes: typeof rawCoIDfromBytes;
    secretSeedLength: number;
    shortHashLength: number;
    expectGroup: typeof expectGroup;
    base64URLtoBytes: typeof base64URLtoBytes;
    bytesToBase64url: typeof bytesToBase64url;
    parseJSON: typeof parseJSON;
    stableStringify: typeof stableStringify;
    accountOrAgentIDfromSessionID: typeof accountOrAgentIDfromSessionID;
    isAccountID: typeof isAccountID;
    accountHeaderForInitialAgentSecret: typeof accountHeaderForInitialAgentSecret;
    idforHeader: typeof idforHeader;
    StreamingHash: typeof StreamingHash;
    Channel: typeof Channel;
    getPriorityFromHeader: typeof getPriorityFromHeader;
    getGroupDependentKeyList: typeof getGroupDependentKeyList;
    getGroupDependentKey: typeof getGroupDependentKey;
    disablePermissionErrors: typeof disablePermissionErrors;
    CO_VALUE_LOADING_CONFIG: {
        MAX_RETRIES: number;
        TIMEOUT: number;
    };
};
export { LocalNode, RawGroup, Role, EVERYONE, Everyone, RawCoMap, RawCoList, RawCoStream, RawBinaryCoStream, RawCoValue, RawCoID, CoID, AnyRawCoValue, RawAccount, RawAccountID, AccountMeta, RawAccountMigration, RawProfile as Profile, SessionID, Media, CoValueCore, ControlledAgent, RawControlledAccount, MAX_RECOMMENDED_TX_SIZE, JsonObject, JsonValue, Peer, BinaryStreamInfo, BinaryCoStreamMeta, AgentID, AgentSecret, InviteSecret, CryptoProvider, SyncMessage, isRawCoID, emptyKnownState, RawCoPlainText, stringifyOpID, logger, base64URLtoBytes, bytesToBase64url, };
export type { Value, IncomingSyncStream, OutgoingSyncQueue, DisconnectedError, PingTimeoutError, CoValueUniqueness, Stringified, CoStreamItem, BinaryStreamItem, BinaryStreamStart, OpID, AccountRole, };
export declare namespace CojsonInternalTypes {
    type CoValueKnownState = import("./sync.js").CoValueKnownState;
    type CoJsonValue<T> = import("./jsonValue.js").CoJsonValue<T>;
    type DoneMessage = import("./sync.js").DoneMessage;
    type KnownStateMessage = import("./sync.js").KnownStateMessage;
    type LoadMessage = import("./sync.js").LoadMessage;
    type NewContentMessage = import("./sync.js").NewContentMessage;
    type SessionNewContent = import("./sync.js").SessionNewContent;
    type CoValueHeader = import("./coValueCore.js").CoValueHeader;
    type Transaction = import("./coValueCore.js").Transaction;
    type TransactionID = import("./ids.js").TransactionID;
    type Signature = import("./crypto/crypto.js").Signature;
    type RawCoID = import("./ids.js").RawCoID;
    type ProfileShape = import("./coValues/account.js").ProfileShape;
    type SealerSecret = import("./crypto/crypto.js").SealerSecret;
    type SignerID = import("./crypto/crypto.js").SignerID;
    type SignerSecret = import("./crypto/crypto.js").SignerSecret;
    type JsonObject = import("./jsonValue.js").JsonObject;
}
//# sourceMappingURL=exports.d.ts.map