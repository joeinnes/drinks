import { PeerKnownStates, ReadonlyPeerKnownStates } from "./PeerKnownStates.js";
import { RawCoID, SessionID } from "./ids.js";
import { CoValueKnownState, Peer, SyncMessage } from "./sync.js";
export declare class PeerState {
    private peer;
    private queue;
    constructor(peer: Peer, knownStates: ReadonlyPeerKnownStates | undefined);
    /**
     * Here we to collect all the known states that a given peer has told us about.
     *
     * This can be used to safely track the sync state of a coValue in a given peer.
     */
    readonly _knownStates: PeerKnownStates;
    get knownStates(): ReadonlyPeerKnownStates;
    /**
     * This one collects the known states "optimistically".
     * We use it to keep track of the content we have sent to a given peer.
     *
     * The main difference with knownState is that this is updated when the content is sent to the peer without
     * waiting for any acknowledgement from the peer.
     */
    readonly _optimisticKnownStates: PeerKnownStates | "assumeInfallible";
    get optimisticKnownStates(): ReadonlyPeerKnownStates;
    readonly toldKnownState: Set<RawCoID>;
    updateHeader(id: RawCoID, header: boolean): void;
    combineWith(id: RawCoID, value: CoValueKnownState): void;
    combineOptimisticWith(id: RawCoID, value: CoValueKnownState): void;
    updateSessionCounter(id: RawCoID, sessionId: SessionID, value: number): void;
    setKnownState(id: RawCoID, knownState: CoValueKnownState | "empty"): void;
    setOptimisticKnownState(id: RawCoID, knownState: CoValueKnownState | "empty"): void;
    get id(): string;
    get role(): "server" | "client" | "storage";
    get priority(): number | undefined;
    get crashOnClose(): boolean;
    shouldRetryUnavailableCoValues(): boolean;
    isServerOrStoragePeer(): boolean;
    private processing;
    closed: boolean;
    processQueue(): Promise<void>;
    pushOutgoingMessage(msg: SyncMessage): void;
    isProcessing(): boolean;
    get incoming(): import("./sync.js").IncomingSyncStream;
    closeListeners: Set<() => void>;
    addCloseListener(listener: () => void): () => void;
    emitClose(): void;
    gracefulShutdown(): void;
    processIncomingMessages(callback: (msg: SyncMessage) => void): Promise<void>;
}
//# sourceMappingURL=PeerState.d.ts.map