import { InMemoryKVStore, JazzContextManager, } from "jazz-tools";
import { LocalStorageKVStore } from "./auth/LocalStorageKVStore.js";
import { createJazzBrowserContext, createJazzBrowserGuestContext, } from "./createBrowserContext.js";
export class JazzBrowserContextManager extends JazzContextManager {
    // TODO: When the storage changes, if the user is changed, update the context
    getKvStore() {
        if (typeof window === "undefined") {
            // To handle running in SSR
            return new InMemoryKVStore();
        }
        else {
            return new LocalStorageKVStore();
        }
    }
    async getNewContext(props, authProps) {
        if (props.guestMode) {
            return createJazzBrowserGuestContext({
                sync: props.sync,
                storage: props.storage,
                authSecretStorage: this.authSecretStorage,
            });
        }
        else {
            return createJazzBrowserContext({
                sync: props.sync,
                storage: props.storage,
                AccountSchema: props.AccountSchema,
                credentials: authProps?.credentials,
                newAccountProps: authProps?.newAccountProps,
                defaultProfileName: props.defaultProfileName,
                authSecretStorage: this.authSecretStorage,
            });
        }
    }
    propsChanged(props) {
        if (!this.props) {
            return true;
        }
        return (this.props.sync.when !== props.sync.when ||
            this.props.sync.peer !== props.sync.peer ||
            this.props.guestMode !== props.guestMode);
    }
}
//# sourceMappingURL=BrowserContextManager.js.map