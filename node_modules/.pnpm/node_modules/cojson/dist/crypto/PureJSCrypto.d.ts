import { blake3 } from "@noble/hashes/blake3";
import { RawCoID, TransactionID } from "../ids.js";
import { Stringified } from "../jsonStringify.js";
import { JsonValue } from "../jsonValue.js";
import { CryptoProvider, Encrypted, KeySecret, Sealed, SealerID, SealerSecret, Signature, SignerID, SignerSecret } from "./crypto.js";
type Blake3State = ReturnType<typeof blake3.create>;
/**
 * Pure JavaScript implementation of the CryptoProvider interface using noble-curves and noble-ciphers libraries.
 * This provides a fallback implementation that doesn't require WebAssembly, offering:
 * - Signing/verifying (Ed25519)
 * - Encryption/decryption (XSalsa20)
 * - Sealing/unsealing (X25519 + XSalsa20-Poly1305)
 * - Hashing (BLAKE3)
 */
export declare class PureJSCrypto extends CryptoProvider<Blake3State> {
    static create(): Promise<PureJSCrypto>;
    emptyBlake3State(): Blake3State;
    cloneBlake3State(state: Blake3State): Blake3State;
    blake3HashOnce(data: Uint8Array): Uint8Array;
    blake3HashOnceWithContext(data: Uint8Array, { context }: {
        context: Uint8Array;
    }): Uint8Array;
    blake3IncrementalUpdate(state: Blake3State, data: Uint8Array): import("@noble/hashes/utils").HashXOF<import("@noble/hashes/blake3").BLAKE3>;
    blake3DigestForState(state: Blake3State): Uint8Array;
    generateNonce(input: Uint8Array): Uint8Array;
    private generateJsonNonce;
    newEd25519SigningKey(): Uint8Array;
    getSignerID(secret: SignerSecret): SignerID;
    sign(secret: SignerSecret, message: JsonValue): Signature;
    verify(signature: Signature, message: JsonValue, id: SignerID): boolean;
    newX25519StaticSecret(): Uint8Array;
    getSealerID(secret: SealerSecret): SealerID;
    encrypt<T extends JsonValue, N extends JsonValue>(value: T, keySecret: KeySecret, nOnceMaterial: N): Encrypted<T, N>;
    decryptRaw<T extends JsonValue, N extends JsonValue>(encrypted: Encrypted<T, N>, keySecret: KeySecret, nOnceMaterial: N): Stringified<T>;
    seal<T extends JsonValue>({ message, from, to, nOnceMaterial, }: {
        message: T;
        from: SealerSecret;
        to: SealerID;
        nOnceMaterial: {
            in: RawCoID;
            tx: TransactionID;
        };
    }): Sealed<T>;
    unseal<T extends JsonValue>(sealed: Sealed<T>, sealer: SealerSecret, from: SealerID, nOnceMaterial: {
        in: RawCoID;
        tx: TransactionID;
    }): T | undefined;
}
export {};
//# sourceMappingURL=PureJSCrypto.d.ts.map