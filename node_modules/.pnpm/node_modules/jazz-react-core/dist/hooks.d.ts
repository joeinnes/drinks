import { Account, AnonymousJazzAgent, CoValue, CoValueClass, ID, JazzContextManager, JazzContextType, RefsToResolve, RefsToResolveStrict, Resolved } from "jazz-tools";
import { RegisteredAccount } from "./provider.js";
export declare function useJazzContext<Acc extends Account>(): JazzContextType<Acc>;
export declare function useJazzContextManager<Acc extends Account>(): JazzContextManager<Acc, {}>;
export declare function useAuthSecretStorage(): import("jazz-tools").AuthSecretStorage;
export declare function useIsAuthenticated(): boolean;
export declare function useCoState<V extends CoValue, const R extends RefsToResolve<V> = true>(Schema: CoValueClass<V>, id: ID<CoValue> | undefined, options?: {
    resolve?: RefsToResolveStrict<V, R>;
}): Resolved<V, R> | undefined | null;
declare function useAccount<A extends RegisteredAccount>(): {
    me: A;
    logOut: () => void;
};
declare function useAccount<A extends RegisteredAccount, R extends RefsToResolve<A>>(options?: {
    resolve?: RefsToResolveStrict<A, R>;
}): {
    me: Resolved<A, R> | undefined | null;
    logOut: () => void;
};
declare function useAccountOrGuest<A extends RegisteredAccount>(): {
    me: A | AnonymousJazzAgent;
};
declare function useAccountOrGuest<A extends RegisteredAccount, R extends RefsToResolve<A>>(options?: {
    resolve?: RefsToResolveStrict<A, R>;
}): {
    me: Resolved<A, R> | undefined | null | AnonymousJazzAgent;
};
export { useAccount, useAccountOrGuest };
export declare function experimental_useInboxSender<I extends CoValue, O extends CoValue | undefined>(inboxOwnerID: ID<RegisteredAccount> | undefined): (message: I) => Promise<O extends CoValue ? ID<O> : undefined>;
//# sourceMappingURL=hooks.d.ts.map