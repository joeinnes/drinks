import { RawCoID } from "./ids.js";
import { CoValueKnownState, PeerID, SyncManager } from "./sync.js";
export type SyncState = {
    uploaded: boolean;
};
export type GlobalSyncStateListenerCallback = (peerId: PeerID, knownState: CoValueKnownState, sync: SyncState) => void;
export type PeerSyncStateListenerCallback = (knownState: CoValueKnownState, sync: SyncState) => void;
export declare class SyncStateManager {
    private syncManager;
    constructor(syncManager: SyncManager);
    private listeners;
    private listenersByPeers;
    subscribeToUpdates(listener: GlobalSyncStateListenerCallback): () => void;
    subscribeToPeerUpdates(peerId: PeerID, listener: PeerSyncStateListenerCallback): () => void;
    getCurrentSyncState(peerId: PeerID, id: RawCoID): SyncState;
    triggerUpdate(peerId: PeerID, id: RawCoID): void;
    private getKnownStateSessions;
    private getIsCoValueFullyUploadedIntoPeer;
}
//# sourceMappingURL=SyncStateManager.d.ts.map