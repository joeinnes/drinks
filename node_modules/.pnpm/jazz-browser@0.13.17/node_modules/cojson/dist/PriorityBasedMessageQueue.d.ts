import { type CoValuePriority } from "./priority.js";
import type { SyncMessage } from "./sync.js";
type LinkedListNode<T> = {
    value: T;
    next: LinkedListNode<T> | undefined;
};
/**
 * Using a linked list to make the shift operation O(1) instead of O(n)
 * as our queues can grow very large when the system is under pressure.
 */
export declare class LinkedList<T> {
    private meter?;
    constructor(meter?: QueueMeter | undefined);
    head: LinkedListNode<T> | undefined;
    tail: LinkedListNode<T> | undefined;
    length: number;
    push(value: T): void;
    shift(): T | undefined;
}
declare class QueueMeter {
    private attrs?;
    private pullCounter;
    private pushCounter;
    constructor(prefix: string, attrs?: Record<string, string | number> | undefined);
    pull(): void;
    push(): void;
}
export declare class PriorityBasedMessageQueue {
    private defaultPriority;
    private queues;
    constructor(defaultPriority: CoValuePriority, 
    /**
     * Optional attributes to be added to the generated metrics.
     * By default the metrics will have the priority as an attribute.
     */
    attrs?: Record<string, string | number>);
    private getQueue;
    push(msg: SyncMessage): void;
    pull(): SyncMessage | undefined;
}
export {};
//# sourceMappingURL=PriorityBasedMessageQueue.d.ts.map