import { logger } from "../logger.js";
import { RawCoMap } from "./coMap.js";
import { RawGroup } from "./group.js";
export function accountHeaderForInitialAgentSecret(agentSecret, crypto) {
    const agent = crypto.getAgentID(agentSecret);
    return {
        type: "comap",
        ruleset: { type: "group", initialAdmin: agent },
        meta: {
            type: "account",
        },
        createdAt: null,
        uniqueness: null,
    };
}
export class RawAccount extends RawGroup {
    currentAgentID() {
        if (this._cachedCurrentAgentID) {
            return this._cachedCurrentAgentID;
        }
        const agents = this.keys()
            .filter((k) => k.startsWith("sealer_"))
            .sort((a, b) => (this.lastEditAt(a)?.at.getTime() || 0) -
            (this.lastEditAt(b)?.at.getTime() || 0));
        if (agents.length !== 1) {
            logger.warn("Account has " + agents.length + " agents", { id: this.id });
        }
        this._cachedCurrentAgentID = agents[0];
        return agents[0];
    }
    createInvite(_) {
        throw new Error("Cannot create invite from an account");
    }
}
/** @hidden */
export class RawControlledAccount extends RawAccount {
    constructor(core, agentSecret) {
        super(core);
        this.agentSecret = agentSecret;
        this.crypto = core.node.crypto;
    }
    /**
     * Creates a new group (with the current account as the group's first admin).
     * @category 1. High-level
     */
    createGroup(uniqueness = this.core.crypto.createdNowUnique()) {
        return this.core.node.createGroup(uniqueness);
    }
    async acceptInvite(groupOrOwnedValueID, inviteSecret) {
        return this.core.node.acceptInvite(groupOrOwnedValueID, inviteSecret);
    }
    currentAgentID() {
        if (this._cachedCurrentAgentID) {
            return this._cachedCurrentAgentID;
        }
        const agentID = this.crypto.getAgentID(this.agentSecret);
        this._cachedCurrentAgentID = agentID;
        return agentID;
    }
    currentSignerID() {
        return this.crypto.getAgentSignerID(this.currentAgentID());
    }
    currentSignerSecret() {
        return this.crypto.getAgentSignerSecret(this.agentSecret);
    }
    currentSealerID() {
        return this.crypto.getAgentSealerID(this.currentAgentID());
    }
    currentSealerSecret() {
        return this.crypto.getAgentSealerSecret(this.agentSecret);
    }
}
export class ControlledAgent {
    constructor(agentSecret, crypto) {
        this.agentSecret = agentSecret;
        this.crypto = crypto;
    }
    get id() {
        return this.crypto.getAgentID(this.agentSecret);
    }
    currentAgentID() {
        return this.crypto.getAgentID(this.agentSecret);
    }
    currentSignerID() {
        return this.crypto.getAgentSignerID(this.currentAgentID());
    }
    currentSignerSecret() {
        return this.crypto.getAgentSignerSecret(this.agentSecret);
    }
    currentSealerID() {
        return this.crypto.getAgentSealerID(this.currentAgentID());
    }
    currentSealerSecret() {
        return this.crypto.getAgentSealerSecret(this.agentSecret);
    }
}
export class RawProfile extends RawCoMap {
}
//# sourceMappingURL=account.js.map