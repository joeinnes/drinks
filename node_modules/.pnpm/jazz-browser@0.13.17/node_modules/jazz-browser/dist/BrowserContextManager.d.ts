import { Account, AccountClass, InMemoryKVStore, JazzContextManager, SyncConfig } from "jazz-tools";
import { JazzContextManagerAuthProps } from "jazz-tools";
import { LocalStorageKVStore } from "./auth/LocalStorageKVStore.js";
import { BaseBrowserContextOptions } from "./createBrowserContext.js";
export type JazzContextManagerProps<Acc extends Account> = {
    guestMode?: boolean;
    sync: SyncConfig;
    onLogOut?: () => void;
    logOutReplacement?: () => void;
    onAnonymousAccountDiscarded?: (anonymousAccount: Acc) => Promise<void>;
    storage?: BaseBrowserContextOptions["storage"];
    AccountSchema?: AccountClass<Acc>;
    defaultProfileName?: string;
};
export declare class JazzBrowserContextManager<Acc extends Account> extends JazzContextManager<Acc, JazzContextManagerProps<Acc>> {
    getKvStore(): LocalStorageKVStore | InMemoryKVStore;
    getNewContext(props: JazzContextManagerProps<Acc>, authProps?: JazzContextManagerAuthProps): Promise<{
        guest: import("jazz-tools").AnonymousJazzAgent;
        node: import("cojson").LocalNode;
        done: () => void;
        logOut: () => Promise<void>;
    } | {
        me: Acc;
        node: import("cojson").LocalNode;
        authSecretStorage: import("jazz-tools").AuthSecretStorage;
        done: () => void;
        logOut: () => Promise<void>;
    }>;
    propsChanged(props: JazzContextManagerProps<Acc>): boolean;
}
//# sourceMappingURL=BrowserContextManager.d.ts.map