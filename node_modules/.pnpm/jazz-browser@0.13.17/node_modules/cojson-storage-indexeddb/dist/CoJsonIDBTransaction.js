// A access unit for the IndexedDB Jazz database
// It's a wrapper around the IDBTransaction object that helps on batching multiple operations
// in a single transaction.
export class CoJsonIDBTransaction {
    constructor(db) {
        this.pendingRequests = [];
        this.rejectHandlers = [];
        this.id = Math.random();
        this.running = false;
        this.failed = false;
        this.done = false;
        this.startedAt = performance.now();
        this.db = db;
        this.tx = this.db.transaction(["coValues", "sessions", "transactions", "signatureAfter"], "readwrite");
        this.tx.oncomplete = () => {
            this.done = true;
        };
        this.tx.onabort = () => {
            this.done = true;
        };
    }
    isReusable() {
        const delta = performance.now() - this.startedAt;
        return !this.done && delta <= 20;
    }
    getObjectStore(name) {
        return this.tx.objectStore(name);
    }
    pushRequest(handler) {
        const next = () => {
            const next = this.pendingRequests.shift();
            if (next) {
                next(this);
            }
            else {
                this.running = false;
                this.done = true;
            }
        };
        if (this.running) {
            return new Promise((resolve, reject) => {
                this.rejectHandlers.push(reject);
                this.pendingRequests.push(async () => {
                    try {
                        const result = await handler(this, next);
                        resolve(result);
                    }
                    catch (error) {
                        reject(error);
                    }
                });
            });
        }
        this.running = true;
        return handler(this, next);
    }
    handleRequest(handler) {
        return this.pushRequest((txEntry, next) => {
            return new Promise((resolve, reject) => {
                const request = handler(txEntry);
                request.onerror = () => {
                    this.failed = true;
                    this.tx.abort();
                    console.error(request.error);
                    reject(request.error);
                    // Don't leave any pending promise
                    for (const handler of this.rejectHandlers) {
                        handler();
                    }
                };
                request.onsuccess = () => {
                    resolve(request.result);
                    next();
                };
            });
        });
    }
    commit() {
        if (!this.done) {
            this.tx.commit();
        }
    }
}
//# sourceMappingURL=CoJsonIDBTransaction.js.map