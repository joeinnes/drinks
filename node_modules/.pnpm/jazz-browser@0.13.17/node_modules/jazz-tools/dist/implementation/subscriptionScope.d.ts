import type { RawCoValue } from "cojson";
import { type Account } from "../coValues/account.js";
import type { AnonymousJazzAgent, CoValue, CoValueClass, CoValueFromRaw, ID } from "../internal.js";
export declare const subscriptionsScopes: WeakMap<CoValue, SubscriptionScope<any>>;
export declare class SubscriptionScope<Root extends CoValue> {
    scopeID: string;
    subscriber: Account | AnonymousJazzAgent;
    entries: Map<ID<CoValue>, {
        state: "loading";
        immediatelyUnsub?: boolean;
    } | {
        state: "loaded";
        rawUnsub: () => void;
    }>;
    rootEntry: {
        state: "loaded";
        value: RawCoValue;
        rawUnsub: () => void;
    };
    scheduleUpdate: () => void;
    scheduledUpdate: boolean;
    cachedValues: {
        [id: ID<CoValue>]: CoValue;
    };
    parents: {
        [id: ID<CoValue>]: Set<ID<CoValue>>;
    };
    syncResolution: boolean;
    constructor(root: Root, rootSchema: CoValueClass<Root> & CoValueFromRaw<Root>, onUpdate: (newRoot: Root, scope: SubscriptionScope<Root>) => void);
    onRefAccessedOrSet(fromId: ID<CoValue>, accessedOrSetId: ID<CoValue> | undefined): void;
    invalidate(id: ID<CoValue>, seen?: Set<ID<CoValue>>): void;
    unsubscribeAll: () => void;
}
//# sourceMappingURL=subscriptionScope.d.ts.map