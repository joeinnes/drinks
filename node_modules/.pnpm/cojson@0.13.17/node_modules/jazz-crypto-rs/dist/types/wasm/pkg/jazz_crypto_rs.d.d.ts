/* tslint:disable */
/* eslint-disable */
/**
 * Generate a 24-byte nonce from input material using BLAKE3.
 * - `nonce_material`: Raw bytes to derive the nonce from
 * Returns 24 bytes suitable for use as a nonce in cryptographic operations.
 * This function is deterministic - the same input will produce the same nonce.
 */
declare function generate_nonce(nonce_material: Uint8Array): Uint8Array;
/**
 * Hash data once using BLAKE3.
 * - `data`: Raw bytes to hash
 * Returns 32 bytes of hash output.
 * This is the simplest way to compute a BLAKE3 hash of a single piece of data.
 */
declare function blake3_hash_once(data: Uint8Array): Uint8Array;
/**
 * Hash data once using BLAKE3 with a context prefix.
 * - `data`: Raw bytes to hash
 * - `context`: Context bytes to prefix to the data
 * Returns 32 bytes of hash output.
 * This is useful for domain separation - the same data hashed with different contexts will produce different outputs.
 */
declare function blake3_hash_once_with_context(data: Uint8Array, context: Uint8Array): Uint8Array;
/**
 * Get an empty BLAKE3 state for incremental hashing.
 * Returns a new Blake3Hasher instance for incremental hashing.
 */
declare function blake3_empty_state(): Blake3Hasher;
/**
 * Update a BLAKE3 state with new data for incremental hashing.
 * - `state`: Current Blake3Hasher instance
 * - `data`: New data to incorporate into the hash
 * Returns the updated Blake3Hasher.
 */
declare function blake3_update_state(state: Blake3Hasher, data: Uint8Array): void;
/**
 * Get the final hash from a BLAKE3 state.
 * - `state`: The Blake3Hasher to finalize
 * Returns 32 bytes of hash output.
 * This finalizes an incremental hashing operation.
 */
declare function blake3_digest_for_state(state: Blake3Hasher): Uint8Array;
/**
 * Generate a new Ed25519 signing key using secure random number generation.
 * Returns 32 bytes of raw key material suitable for use with other Ed25519 functions.
 */
declare function new_ed25519_signing_key(): Uint8Array;
/**
 * WASM-exposed function to derive an Ed25519 verifying key from a signing key.
 * - `signing_key`: 32 bytes of signing key material
 * Returns 32 bytes of verifying key material or throws JsError if key is invalid.
 */
declare function ed25519_verifying_key(signing_key: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to sign a message using Ed25519.
 * - `signing_key`: 32 bytes of signing key material
 * - `message`: Raw bytes to sign
 * Returns 64 bytes of signature material or throws JsError if signing fails.
 */
declare function ed25519_sign(signing_key: Uint8Array, message: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to verify an Ed25519 signature.
 * - `verifying_key`: 32 bytes of verifying key material
 * - `message`: Raw bytes that were signed
 * - `signature`: 64 bytes of signature material
 * Returns true if signature is valid, false otherwise, or throws JsError if verification fails.
 */
declare function ed25519_verify(verifying_key: Uint8Array, message: Uint8Array, signature: Uint8Array): boolean;
/**
 * WASM-exposed function to validate and copy Ed25519 signing key bytes.
 * - `bytes`: 32 bytes of signing key material to validate
 * Returns the same 32 bytes if valid or throws JsError if invalid.
 */
declare function ed25519_signing_key_from_bytes(bytes: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to derive the public key from an Ed25519 signing key.
 * - `signing_key`: 32 bytes of signing key material
 * Returns 32 bytes of public key material or throws JsError if key is invalid.
 */
declare function ed25519_signing_key_to_public(signing_key: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to sign a message with an Ed25519 signing key.
 * - `signing_key`: 32 bytes of signing key material
 * - `message`: Raw bytes to sign
 * Returns 64 bytes of signature material or throws JsError if signing fails.
 */
declare function ed25519_signing_key_sign(signing_key: Uint8Array, message: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to validate and copy Ed25519 verifying key bytes.
 * - `bytes`: 32 bytes of verifying key material to validate
 * Returns the same 32 bytes if valid or throws JsError if invalid.
 */
declare function ed25519_verifying_key_from_bytes(bytes: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to validate and copy Ed25519 signature bytes.
 * - `bytes`: 64 bytes of signature material to validate
 * Returns the same 64 bytes if valid or throws JsError if invalid.
 */
declare function ed25519_signature_from_bytes(bytes: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to encrypt bytes with a key secret and nonce material.
 * - `value`: The raw bytes to encrypt
 * - `key_secret`: A base58-encoded key secret with "keySecret_z" prefix
 * - `nonce_material`: Raw bytes used to generate the nonce
 * Returns the encrypted bytes or throws a JsError if encryption fails.
 */
declare function encrypt(value: Uint8Array, key_secret: string, nonce_material: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to decrypt bytes with a key secret and nonce material.
 * - `ciphertext`: The encrypted bytes to decrypt
 * - `key_secret`: A base58-encoded key secret with "keySecret_z" prefix
 * - `nonce_material`: Raw bytes used to generate the nonce (must match encryption)
 * Returns the decrypted bytes or throws a JsError if decryption fails.
 */
declare function decrypt(ciphertext: Uint8Array, key_secret: string, nonce_material: Uint8Array): Uint8Array;
/**
 * WASM-exposed function for sealing a message using X25519 + XSalsa20-Poly1305.
 * Provides authenticated encryption with perfect forward secrecy.
 * - `message`: Raw bytes to seal
 * - `sender_secret`: Base58-encoded sender's private key with "sealerSecret_z" prefix
 * - `recipient_id`: Base58-encoded recipient's public key with "sealer_z" prefix
 * - `nonce_material`: Raw bytes used to generate the nonce
 * Returns sealed bytes or throws JsError if sealing fails.
 */
declare function seal(message: Uint8Array, sender_secret: string, recipient_id: string, nonce_material: Uint8Array): Uint8Array;
/**
 * WASM-exposed function for unsealing a message using X25519 + XSalsa20-Poly1305.
 * Provides authenticated decryption with perfect forward secrecy.
 * - `sealed_message`: The sealed bytes to decrypt
 * - `recipient_secret`: Base58-encoded recipient's private key with "sealerSecret_z" prefix
 * - `sender_id`: Base58-encoded sender's public key with "sealer_z" prefix
 * - `nonce_material`: Raw bytes used to generate the nonce (must match sealing)
 * Returns unsealed bytes or throws JsError if unsealing fails.
 */
declare function unseal(sealed_message: Uint8Array, recipient_secret: string, sender_id: string, nonce_material: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to sign a message using Ed25519.
 * - `message`: Raw bytes to sign
 * - `secret`: Raw Ed25519 signing key bytes
 * Returns base58-encoded signature with "signature_z" prefix or throws JsError if signing fails.
 */
declare function sign(message: Uint8Array, secret: Uint8Array): string;
/**
 * WASM-exposed function to verify an Ed25519 signature.
 * - `signature`: Raw signature bytes
 * - `message`: Raw bytes that were signed
 * - `id`: Raw Ed25519 verifying key bytes
 * Returns true if signature is valid, false otherwise, or throws JsError if verification fails.
 */
declare function verify(signature: Uint8Array, message: Uint8Array, id: Uint8Array): boolean;
/**
 * WASM-exposed function to derive a signer ID from a signing key.
 * - `secret`: Raw Ed25519 signing key bytes
 * Returns base58-encoded verifying key with "signer_z" prefix or throws JsError if derivation fails.
 */
declare function get_signer_id(secret: Uint8Array): string;
/**
 * Generate a new X25519 private key using secure random number generation.
 * Returns 32 bytes of raw key material suitable for use with other X25519 functions.
 * This key can be reused for multiple Diffie-Hellman exchanges.
 */
declare function new_x25519_private_key(): Uint8Array;
/**
 * WASM-exposed function to derive an X25519 public key from a private key.
 * - `private_key`: 32 bytes of private key material
 * Returns 32 bytes of public key material or throws JsError if key is invalid.
 */
declare function x25519_public_key(private_key: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to perform X25519 Diffie-Hellman key exchange.
 * - `private_key`: 32 bytes of private key material
 * - `public_key`: 32 bytes of public key material
 * Returns 32 bytes of shared secret material or throws JsError if key exchange fails.
 */
declare function x25519_diffie_hellman(private_key: Uint8Array, public_key: Uint8Array): Uint8Array;
/**
 * WASM-exposed function to derive a sealer ID from a sealer secret.
 * - `secret`: Raw bytes of the sealer secret
 * Returns a base58-encoded sealer ID with "sealer_z" prefix or throws JsError if derivation fails.
 */
declare function get_sealer_id(secret: Uint8Array): string;
/**
 * WASM-exposed function for XSalsa20 encryption without authentication.
 * - `key`: 32-byte key for encryption
 * - `nonce_material`: Raw bytes used to generate a 24-byte nonce via BLAKE3
 * - `plaintext`: Raw bytes to encrypt
 * Returns the encrypted bytes or throws a JsError if encryption fails.
 * Note: This function does not provide authentication. Use encrypt_xsalsa20_poly1305 for authenticated encryption.
 */
declare function encrypt_xsalsa20(key: Uint8Array, nonce_material: Uint8Array, plaintext: Uint8Array): Uint8Array;
/**
 * WASM-exposed function for XSalsa20 decryption without authentication.
 * - `key`: 32-byte key for decryption (must match encryption key)
 * - `nonce_material`: Raw bytes used to generate a 24-byte nonce (must match encryption)
 * - `ciphertext`: Encrypted bytes to decrypt
 * Returns the decrypted bytes or throws a JsError if decryption fails.
 * Note: This function does not provide authentication. Use decrypt_xsalsa20_poly1305 for authenticated decryption.
 */
declare function decrypt_xsalsa20(key: Uint8Array, nonce_material: Uint8Array, ciphertext: Uint8Array): Uint8Array;
declare function start(): void;
declare class Blake3Hasher {
  free(): void;
  constructor();
  update(data: Uint8Array): void;
  finalize(): Uint8Array;
  clone(): Blake3Hasher;
}

type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly generate_nonce: (a: number, b: number, c: number) => void;
  readonly blake3_hash_once: (a: number, b: number, c: number) => void;
  readonly blake3_hash_once_with_context: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly __wbg_blake3hasher_free: (a: number, b: number) => void;
  readonly blake3hasher_finalize: (a: number, b: number) => void;
  readonly blake3hasher_clone: (a: number) => number;
  readonly blake3_empty_state: () => number;
  readonly blake3_update_state: (a: number, b: number, c: number) => void;
  readonly blake3_digest_for_state: (a: number, b: number) => void;
  readonly new_ed25519_signing_key: (a: number) => void;
  readonly ed25519_sign: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly ed25519_verify: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly ed25519_signing_key_from_bytes: (a: number, b: number, c: number) => void;
  readonly ed25519_signing_key_to_public: (a: number, b: number, c: number) => void;
  readonly ed25519_verifying_key_from_bytes: (a: number, b: number, c: number) => void;
  readonly ed25519_signature_from_bytes: (a: number, b: number, c: number) => void;
  readonly decrypt: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly seal: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly unseal: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly sign: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly verify: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly get_signer_id: (a: number, b: number, c: number) => void;
  readonly new_x25519_private_key: (a: number) => void;
  readonly x25519_public_key: (a: number, b: number, c: number) => void;
  readonly x25519_diffie_hellman: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly get_sealer_id: (a: number, b: number, c: number) => void;
  readonly decrypt_xsalsa20: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly start: () => void;
  readonly ed25519_signing_key_sign: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly encrypt_xsalsa20: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly ed25519_verifying_key: (a: number, b: number, c: number) => void;
  readonly blake3hasher_update: (a: number, b: number, c: number) => void;
  readonly encrypt: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly blake3hasher_new: () => number;
  readonly __wbindgen_export_0: (a: number) => void;
  readonly __wbindgen_export_1: (a: number, b: number, c: number) => void;
  readonly __wbindgen_export_2: (a: number, b: number) => number;
  readonly __wbindgen_export_3: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_start: () => void;
}

type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
declare function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

export { Blake3Hasher, type InitInput, type InitOutput, type SyncInitInput, blake3_digest_for_state, blake3_empty_state, blake3_hash_once, blake3_hash_once_with_context, blake3_update_state, decrypt, decrypt_xsalsa20, ed25519_sign, ed25519_signature_from_bytes, ed25519_signing_key_from_bytes, ed25519_signing_key_sign, ed25519_signing_key_to_public, ed25519_verify, ed25519_verifying_key, ed25519_verifying_key_from_bytes, encrypt, encrypt_xsalsa20, generate_nonce, get_sealer_id, get_signer_id, initSync, new_ed25519_signing_key, new_x25519_private_key, seal, sign, start, unseal, verify, x25519_diffie_hellman, x25519_public_key };
