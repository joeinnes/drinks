import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { BrowserPasskeyAuth } from "jazz-browser";
import { useAuthSecretStorage, useIsAuthenticated, useJazzContext, } from "jazz-react-core";
import { useMemo, useState } from "react";
/**
 * `usePasskeyAuth` hook provides a `JazzAuth` object for passkey authentication.
 *
 * @example
 * ```ts
 * const auth = usePasskeyAuth({ appName, appHostname });
 * ```
 *
 * @category Auth Providers
 */
export function usePasskeyAuth({ appName, appHostname, }) {
    const context = useJazzContext();
    const authSecretStorage = useAuthSecretStorage();
    if ("guest" in context) {
        throw new Error("Passkey auth is not supported in guest mode");
    }
    const authMethod = useMemo(() => {
        return new BrowserPasskeyAuth(context.node.crypto, context.authenticate, authSecretStorage, appName, appHostname);
    }, [appName, appHostname, authSecretStorage]);
    const isAuthenticated = useIsAuthenticated();
    return {
        state: isAuthenticated ? "signedIn" : "anonymous",
        logIn: authMethod.logIn,
        signUp: authMethod.signUp,
    };
}
export const PasskeyAuthBasicUI = (props) => {
    const [username, setUsername] = useState("");
    const [error, setError] = useState(null);
    const auth = usePasskeyAuth({
        appName: props.appName,
        appHostname: props.appHostname,
    });
    if (auth.state === "signedIn") {
        return props.children ?? null;
    }
    const { logIn, signUp } = auth;
    return (_jsxs("div", { style: {
            width: "100vw",
            height: "100vh",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
        }, children: [error && _jsx("div", { style: { color: "red" }, children: error }), _jsxs("div", { style: {
                    width: "18rem",
                    display: "flex",
                    flexDirection: "column",
                    gap: "2rem",
                }, children: [_jsxs("form", { style: {
                            width: "18rem",
                            display: "flex",
                            flexDirection: "column",
                            gap: "0.5rem",
                        }, onSubmit: (e) => {
                            e.preventDefault();
                            setError(null);
                            signUp(username).catch((error) => setError(error.message));
                        }, children: [_jsx("input", { placeholder: "Display name", value: username, onChange: (e) => setUsername(e.target.value), autoComplete: "webauthn", style: {
                                    border: "2px solid #000",
                                    padding: "11px 8px",
                                    borderRadius: "6px",
                                } }), _jsx("input", { type: "submit", value: "Sign up", style: {
                                    background: "#000",
                                    color: "#fff",
                                    padding: "13px 5px",
                                    border: "none",
                                    borderRadius: "6px",
                                    cursor: "pointer",
                                } })] }), _jsx("button", { onClick: () => {
                            setError(null);
                            logIn().catch((error) => setError(error.message));
                        }, style: {
                            background: "#000",
                            color: "#fff",
                            padding: "13px 5px",
                            border: "none",
                            borderRadius: "6px",
                            cursor: "pointer",
                        }, children: "Log in with existing account" })] })] }));
};
//# sourceMappingURL=PasskeyAuth.js.map