import { useEffect, useState } from "react";
/** @category Media */
export function useProgressiveImg({ image, maxWidth, targetWidth, }) {
    const [current, setCurrent] = useState(undefined);
    useEffect(() => {
        let lastHighestRes;
        if (!image)
            return;
        const unsub = image.subscribe({}, (update) => {
            const highestRes = update?.highestResAvailable({ maxWidth, targetWidth });
            if (highestRes) {
                if (highestRes.res !== lastHighestRes) {
                    lastHighestRes = highestRes.res;
                    const blob = highestRes.stream.toBlob();
                    if (blob) {
                        const blobURI = URL.createObjectURL(blob);
                        setCurrent({ src: blobURI, res: highestRes.res });
                        return () => {
                            setTimeout(() => URL.revokeObjectURL(blobURI), 200);
                        };
                    }
                }
            }
            else {
                setCurrent({
                    src: update?.placeholderDataURL,
                    res: "placeholder",
                });
            }
        });
        return unsub;
    }, [image?.id, maxWidth]);
    return {
        src: current?.src,
        res: current?.res,
        originalSize: image?.originalSize,
    };
}
/** @category Media */
export function ProgressiveImg({ children, image, maxWidth, targetWidth, }) {
    const result = useProgressiveImg({ image, maxWidth, targetWidth });
    return result && children(result);
}
//# sourceMappingURL=media.js.map