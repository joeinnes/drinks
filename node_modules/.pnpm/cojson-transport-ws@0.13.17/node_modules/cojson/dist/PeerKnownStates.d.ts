import { RawCoID, SessionID } from "./ids.js";
import { CoValueKnownState } from "./sync.js";
export declare class PeerKnownStates {
    private coValues;
    updateHeader(id: RawCoID, header: boolean): void;
    combineWith(id: RawCoID, value: CoValueKnownState): void;
    updateSessionCounter(id: RawCoID, sessionId: SessionID, value: number): void;
    set(id: RawCoID, knownState: CoValueKnownState | "empty"): void;
    get(id: RawCoID): CoValueKnownState | undefined;
    has(id: RawCoID): boolean;
    clone(): PeerKnownStates;
    listeners: Set<(id: RawCoID, knownState: CoValueKnownState) => void>;
    triggerUpdate(id: RawCoID): void;
    private trigger;
    subscribe(listener: (id: RawCoID, knownState: CoValueKnownState) => void): () => void;
}
export type ReadonlyPeerKnownStates = Pick<PeerKnownStates, "get" | "has" | "clone" | "subscribe">;
//# sourceMappingURL=PeerKnownStates.d.ts.map