import { Channel } from "queueueue";
export { Channel } from "queueueue";
export function connectedPeers(peer1id, peer2id, { trace = false, peer1role = "client", peer2role = "client", crashOnClose = false, } = {}) {
    const [from1to2Rx, from1to2Tx] = newQueuePair(trace ? { traceAs: `${peer1id} -> ${peer2id}` } : undefined);
    const [from2to1Rx, from2to1Tx] = newQueuePair(trace ? { traceAs: `${peer2id} -> ${peer1id}` } : undefined);
    const peer2AsPeer = {
        id: peer2id,
        incoming: from2to1Rx,
        outgoing: from1to2Tx,
        role: peer2role,
        crashOnClose: crashOnClose,
    };
    const peer1AsPeer = {
        id: peer1id,
        incoming: from1to2Rx,
        outgoing: from2to1Tx,
        role: peer1role,
        crashOnClose: crashOnClose,
    };
    return [peer1AsPeer, peer2AsPeer];
}
export function newQueuePair(options = {}) {
    const channel = new Channel();
    if (options.traceAs) {
        return [
            (async function* () {
                for await (const msg of channel) {
                    console.debug(options.traceAs, JSON.stringify(msg, (k, v) => k === "changes" || k === "encryptedChanges"
                        ? v.slice(0, 20) + "..."
                        : v, 2));
                    yield msg;
                }
            })(),
            channel,
        ];
    }
    else {
        return [channel.wrap(), channel];
    }
}
//# sourceMappingURL=streamUtils.js.map