import { PeerState } from "./PeerState.js";
import { CoValueCore, TryAddTransactionsError } from "./coValueCore.js";
import { RawCoID } from "./ids.js";
import { PeerID } from "./sync.js";
export declare const CO_VALUE_LOADING_CONFIG: {
    MAX_RETRIES: number;
    TIMEOUT: number;
};
export declare class CoValueState {
    private peers;
    core: CoValueCore | null;
    id: RawCoID;
    private listeners;
    private counter;
    constructor(id: RawCoID);
    get highLevelState(): "unknown" | "available" | "unavailable" | "loading";
    isErroredInPeer(peerId: PeerID): boolean;
    isAvailable(): this is {
        type: "available";
        core: CoValueCore;
    };
    addListener(listener: (state: CoValueState) => void): void;
    removeListener(listener: (state: CoValueState) => void): void;
    private notifyListeners;
    getCoValue(): Promise<CoValueCore | "unavailable">;
    loadFromPeers(peers: PeerState[]): Promise<void>;
    private updateCounter;
    markNotFoundInPeer(peerId: PeerID): void;
    markAvailable(coValue: CoValueCore, fromPeerId: PeerID): void;
    internalMarkMagicallyAvailable(coValue: CoValueCore): void;
    markErrored(peerId: PeerID, error: TryAddTransactionsError): void;
    private markPending;
}
//# sourceMappingURL=coValueState.d.ts.map