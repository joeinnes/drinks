import type { JsonValue } from "./jsonValue.js";
export declare enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3,
    NONE = 4
}
type ErrorAttributes = {
    err: unknown;
};
export interface LogSystem {
    debug(message: string, attributes?: Record<string, JsonValue>): void;
    info(message: string, attributes?: Record<string, JsonValue>): void;
    warn(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
    error(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
}
export declare class ConsoleLogSystem implements LogSystem {
    debug(message: string, attributes?: Record<string, JsonValue>): void;
    info(message: string, attributes?: Record<string, JsonValue>): void;
    warn(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
    error(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
}
export declare class Logger {
    private level;
    private logSystem;
    constructor(level?: LogLevel, logSystem?: LogSystem);
    setLevel(level: LogLevel): void;
    setLogSystem(logSystem: LogSystem): void;
    debug(message: string, attributes?: Record<string, JsonValue>): void;
    info(message: string, attributes?: Record<string, JsonValue>): void;
    warn(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
    error(message: string, attributes?: Record<string, JsonValue> | ErrorAttributes): void;
}
export declare const logger: Logger;
export {};
//# sourceMappingURL=logger.d.ts.map