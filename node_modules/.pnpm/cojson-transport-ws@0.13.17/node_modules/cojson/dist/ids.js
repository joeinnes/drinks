import { base58 } from "@scure/base";
import { shortHashLength } from "./crypto/crypto.js";
export function isRawCoID(id) {
    return typeof id === "string" && id.startsWith("co_z");
}
export function rawCoIDtoBytes(id) {
    return base58.decode(id.substring("co_z".length));
}
export function rawCoIDfromBytes(bytes) {
    return `co_z${base58.encode(bytes.slice(0, shortHashLength))}`;
}
export function isAgentID(id) {
    return (typeof id === "string" &&
        id.startsWith("sealer_") &&
        id.includes("/signer_"));
}
export function isParentGroupReference(key) {
    return key.startsWith("parent_");
}
export function getParentGroupId(key) {
    return key.slice("parent_".length);
}
export function isChildGroupReference(key) {
    return key.startsWith("child_");
}
export function getChildGroupId(key) {
    return key.slice("child_".length);
}
export function getGroupDependentKey(key) {
    if (typeof key !== "string")
        return undefined;
    if (isParentGroupReference(key)) {
        return getParentGroupId(key);
    }
    else if (key.startsWith("co_")) {
        return key;
    }
    return undefined;
}
export function getGroupDependentKeyList(keys) {
    const groupDependentKeys = [];
    for (const key of keys) {
        const value = getGroupDependentKey(key);
        if (value) {
            groupDependentKeys.push(value);
        }
    }
    return groupDependentKeys;
}
//# sourceMappingURL=ids.js.map