import { CoValueCore, Transaction } from "./coValueCore.js";
import { RawAccountID } from "./coValues/account.js";
import { KeyID } from "./crypto/crypto.js";
import { AgentID, RawCoID, TransactionID } from "./ids.js";
import { CoValueKnownState } from "./sync.js";
export type PermissionsDef = {
    type: "group";
    initialAdmin: RawAccountID | AgentID;
} | {
    type: "ownedByGroup";
    group: RawCoID;
} | {
    type: "unsafeAllowAll";
};
export type AccountRole = "reader" | "writer" | "admin" | "writeOnly";
export type Role = AccountRole | "revoked" | "adminInvite" | "writerInvite" | "readerInvite" | "writeOnlyInvite";
export declare function disablePermissionErrors(): void;
export declare function determineValidTransactions(coValue: CoValueCore, knownTransactions?: CoValueKnownState["sessions"]): {
    txID: TransactionID;
    tx: Transaction;
}[];
export declare function isWriteKeyForMember(co: string): co is `writeKeyFor_${RawAccountID | AgentID}`;
export declare function getAccountOrAgentFromWriteKeyForMember(co: `writeKeyFor_${RawAccountID | AgentID}`): RawAccountID | AgentID;
export declare function isKeyForKeyField(co: string): co is `${KeyID}_for_${KeyID}`;
export declare function isKeyForAccountField(co: string): co is `${KeyID}_for_${RawAccountID | AgentID}`;
//# sourceMappingURL=permissions.d.ts.map